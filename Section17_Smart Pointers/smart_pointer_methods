//unique pointer
declaration:
unique_ptr<int>p1{new int {100}};

p1.get()  //adress of the pointer

p1.reset() //p1 is now a null pointer

if(p1)  //if not a nullptr then the if block will be executed

copying and reallocation not allowed,deletion is automatic

vec //vec of unique_ptr

vec.push_back(p1) //wrong
vec.push_back(move(p1)) //correct way  //the vector now owns the pointer and p1 has no ownership

//new and best way to declare
unique_ptr<int>p1 = make_unique<int>(100);

//ex for a class_name
unique_ptr<Account> p2 =make_unique<Account>("a",200)
or 
auto p2=make_unique<Account>("a",200)
///////////////////////////////////////////////////////////////////////////////////////////////

//shared pointers

declaration:
shared_ptr<int>p1{new int {100}};

p1.use_count() //returns how many times that pointer has been allocated(copied)

p1.reset() //resets the count

shared_ptr<Account> p2 =make_shared<Account>("a",200)
/////////////////////////////////////////////////////////////////////////////////////////////

//weak pointers

declaration:
weak_ptr<A> a_ptr; 

//this helps us when two pointers share resources and we wanna delete any one...
//it is impossible if u use a shared pointer as its in kinda of a deadlock and it leads to memory leak.


///////////////////////////////////////////////////////////////////////////////////////////

custom deleters:

using functions:

void my_deleter(class_name *p)
{
    delete p;
}

shared_ptr<class_name>ptr{new class_name{},my_deleter};